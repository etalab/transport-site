version: 2.1

# useful information at https://circleci.com/docs/2.0/language-elixir/
# and https://circleci.com/docs/2.0/reusing-config/#using-the-parameters-declaration

default_docker: &default_docker
  image: << parameters.base_image >>
  environment:
    MIX_ENV: test
    PG_URL_TEST: ecto://root@127.0.0.1/transport_test
    DATAGOUVFR_SITE: https://demo.data.gouv.fr
    MAILCHIMP_NEWSLETTER_URL: //gouv.us13.list-manage.com/subscribe/post?u=5ee8bfe0f1b073b49de06a063&amp;id=13db2e9a94
    GTFS_VALIDATOR_URL: https://transport-validator.cleverapps.io
    SECRET_KEY_BASE: "SOME-SECRET-KEY-BASE-FOR-TESTING-SOME-SECRET-KEY-BASE-FOR-TESTING"

defaults: &defaults
  parameters:
    base_image:
      default: betagouv/transport:elixir-1.10.4-erlang-23.2.7.2-alpine-3.13.3
      type: string
  working_directory: ~/transport
  docker:
    - *default_docker

defaults_with_postgres: &defaults_with_postgres
  <<: *defaults
  docker:
    - *default_docker
    - image: circleci/postgres:12.0-alpine-postgis
      environment:
        POSTGRES_USER: root
        POSTGRES_DB: transport_test

jobs:
  build:
    <<: *defaults

    steps:
      - checkout

      - restore_cache:
          # Please read: https://circleci.com/docs/2.0/caching/#restoring-cache
          keys:
            - elixir-<< parameters.base_image >>-{{ .Branch }}-{{ checksum "mix.lock" }}
            - elixir-<< parameters.base_image >>-{{ .Branch }}
            - elixir-<< parameters.base_image >>
      - run:
          name: Install hex
          command: mix local.hex --force

      - run:
          name: Install rebar
          command: mix local.rebar --force

      - run:
          name: Install mix dependencies for MIX_ENV=dev
          command: MIX_ENV=dev mix deps.get --force

      - run:
          name: Compile mix dependencies for MIX_ENV=dev
          command: MIX_ENV=dev mix deps.compile

      - run:
          name: Install mix dependencies for MIX_ENV=test
          command: mix deps.get

      - run:
          name: Compile mix dependencies for MIX_ENV=test
          command: mix deps.compile

      # Here we attempt to create 3 different caches to optimize the build process

      # Most specific
      - save_cache:
          key: elixir-<< parameters.base_image >>-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths:
            - ~/transport/_build
            - ~/transport/deps
            - ~/.mix

      # Intermediate
      - save_cache:
          key: elixir-<< parameters.base_image >>-{{ .Branch }}
          paths:
            - ~/transport/_build
            - ~/transport/deps
            - ~/.mix

      # Least specific
      - save_cache:
          key: elixir-<< parameters.base_image >>
          paths:
            - ~/transport/_build
            - ~/transport/deps
            - ~/.mix

      - run:
          name: Install yarn dependencies
          command: cd ~/transport/apps/transport/client && yarn install

      - run:
          name: Compile assets
          command: cd ~/transport/apps/transport/client && npm run build

      # NOTE: I think this should be moved to the dialyzer parallel section,
      # but then we need to think about how the persistence/caching will be
      # handled, and think about concurrent access (?) with various jobs to the cache.

      - restore_cache:
          keys:
            - elixir-<< parameters.base_image >>-plt-{{ .Branch }}-{{ checksum "mix.lock" }}
            - elixir-<< parameters.base_image >>-plt-{{ .Branch }}
            - elixir-<< parameters.base_image >>-plt

      - run:
          name: Build PLT
          command: MIX_ENV=dev mix dialyzer --plt
          # PLT construction can stay up quite a bit without generating any output
          # We add a bit of tolerance here
          no_output_timeout: 20m

      - save_cache:
          key: elixir-<< parameters.base_image >>-plt-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths:
            - ~/transport/dialyzer-plt

      - save_cache:
          key: elixir-<< parameters.base_image >>-plt-{{ .Branch }}
          paths:
            - ~/transport/dialyzer-plt

      - save_cache:
          key: elixir-<< parameters.base_image >>-plt
          paths:
            - ~/transport/dialyzer-plt

      - persist_to_workspace:
          root: ~/transport
          paths:
            - .

  test_lint:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/transport

      - run:
          name: Run linters
          command: |
            mix credo --strict
            mix npm "run linter:ecma"
            mix npm "run linter:sass"

  test_format:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/transport

      - run:
          name: Run formatter
          command: mix format --check-formatted --dry-run

  test_dialyzer:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/transport

      - run:
          name: Run dialyzer (static analysis)
          command: MIX_ENV=dev mix dialyzer

  test_unit:
    <<: *defaults_with_postgres
    steps:
      - attach_workspace:
          at: ~/transport

      - run:
          name: Run tests
          command: |
            export SECRET_KEY_BASE=`mix phx.gen.secret`
            mix test

  test_external:
    <<: *defaults_with_postgres

    steps:
      - attach_workspace:
          at: ~/transport

      - run:
          name: Run tests
          command: |
            export SECRET_KEY_BASE=`mix phx.gen.secret`
            mix test --only external

workflows:
  version: 2
  transport:
    jobs:
      - build

      - test_lint:
          requires:
            - build

      - test_format:
          requires:
            - build

      - test_unit:
          requires:
            - build

      - test_external:
          requires:
            - build

      - test_dialyzer:
          requires:
            - build
